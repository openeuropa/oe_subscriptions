<?php

/**
 * @file
 * Subscriptions digest module.
 */

declare(strict_types=1);

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\oe_subscriptions_digest\FlagHelper;
use Drupal\oe_subscriptions_digest\SubscriptionsFormAlter;

/**
 * Implements hook_flag_insert().
 *
 * The message_subscribe_email module uses message_subscribe to email
 * subscribers that want updates. Every flag that is prefixed with "subscribe_"
 * (a subscription flag) requires a flag that is prefixed with "email_" and the
 * same suffix (e.g. "subscribe_node" and "email_node"). The flag should have at
 * least one bundle associated with it.
 */
function oe_subscriptions_digest_flag_insert(EntityInterface $entity) {
  $mail_prefix = \Drupal::config('message_subscribe_email.settings')->get('flag_prefix');
  if (empty($mail_prefix) || !FlagHelper::isSubscribeFlag($entity)) {
    return;
  }
  $subscribe_prefix = \Drupal::config('message_subscribe.settings')->get('flag_prefix');
  $email_flag_id = str_replace($subscribe_prefix, $mail_prefix, $entity->id());
  if (\Drupal::service('entity_type.manager')->getStorage('flag')->load($email_flag_id)) {
    return;
  }
  $entity->createDuplicate()
    ->set('id', $email_flag_id)
    ->set('label', $mail_prefix . ' - ' . $entity->label())
    ->save();
}

/**
 * Implements hook_flag_delete().
 */
function oe_subscriptions_digest_flag_delete(EntityInterface $entity) {
  $mail_prefix = \Drupal::config('message_subscribe_email.settings')->get('flag_prefix');
  if (empty($mail_prefix) || !FlagHelper::isSubscribeFlag($entity)) {
    return;
  }
  $subscribe_prefix = \Drupal::config('message_subscribe.settings')->get('flag_prefix');
  $email_flag_id = str_replace($subscribe_prefix, $mail_prefix, $entity->id());
  if ($email_flag = \Drupal::service('entity_type.manager')->getStorage('flag')->load($email_flag_id)) {
    $email_flag->delete();
  }
}

/**
 * Implements hook_user_update().
 */
function oe_subscriptions_digest_user_update(EntityInterface $entity) {
  if (
    !$entity->hasField('message_digest') ||
    $entity->get('message_digest')->value === $entity->original->get('message_digest')->value
  ) {
    return;
  }
  $mail_prefix = \Drupal::config('message_subscribe_email.settings')->get('flag_prefix');
  if (empty($mail_prefix)) {
    return;
  }
  $flagging_storage = \Drupal::service('entity_type.manager')->getStorage('flagging');
  $query = $flagging_storage->getQuery();
  $query
    ->accessCheck(FALSE)
    ->condition('flag_id', $mail_prefix . '_', 'STARTS_WITH')
    ->condition('uid', $entity->id());

  $flaggings = $flagging_storage->loadMultiple($query->execute());
  foreach ($flaggings as $flagging) {
    if ($flagging->hasField('message_digest')) {
      $flagging->set('message_digest', $entity->get('message_digest')->value)->save();
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for oe_subscriptions_user_subscriptions_form.
 */
function oe_subscriptions_digest_form_oe_subscriptions_user_subscriptions_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  \Drupal::classResolver(SubscriptionsFormAlter::class)->subscriptionsFormAlter($form, $form_state);
}
